import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from config import TOKEN
from datetime import datetime, date
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
if not os.path.exists("user_data"):
    os.makedirs("user_data")

def get_user_file_path(user_id):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–∞–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return f"user_data/user_{user_id}.txt"

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –°—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
AWAITING_DELETE_NUMBER = 0
AWAITING_NAME = "AWAITING_NAME"
AWAITING_DATE = "AWAITING_DATE"

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
NAME, DAY, MONTH, YEAR = range(4)

# –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def get_menu_keyboard():
    keyboard = [
        [KeyboardButton("–î–æ–¥–∞—Ç–∏ –¥–∞—Ç—É")],
        [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç–∏")],
        [KeyboardButton("–ù–∞–π–±–ª–∏–∂—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")],
        [KeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞—Ç—É")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –º–µ–Ω—é
    reply_markup = get_menu_keyboard()
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.mention_html()}! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    message = update.message
    text = message.text

    if text == "–î–æ–¥–∞—Ç–∏ –¥–∞—Ç—É":
        return await add_birthday_start(update, context)
    elif text == "–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç–∏":
        await show_dates(update, context)
    elif text == "–ù–∞–π–±–ª–∏–∂—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
        await get_nearest_birthday(update, context)
    elif text == "–í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞—Ç—É":
        return await delete_birthday_start(update, context)
    else:
        await message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.",
            reply_markup=get_menu_keyboard()
        )

# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
async def show_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_file = get_user_file_path(user_id)
    
    try:
        if not os.path.exists(user_file):
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞—Ç.", reply_markup=get_menu_keyboard())
            return

        with open(user_file, "r", encoding="utf-8") as file:
            data = file.readlines()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ user_data –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 1 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        current_page = context.user_data.get('current_page', 1)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        items_per_page = 10
        start_index = (current_page - 1) * items_per_page
        end_index = min(start_index + items_per_page, len(data))
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        page_data = data[start_index:end_index] if data else []
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ HTML —Ç–µ–≥–∞–º–∏
        if page_data:
            numbered_data = '\n'.join([
                f"<b>{start_index + i + 1}.</b> <code>{line.strip()}</code>" 
                for i, line in enumerate(page_data)
            ])
        else:
            numbered_data = "<i>–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ</i>"
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó (10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫)
        keyboard = []
        row = []
        for page in range(1, 11):
            # –í–∏–¥—ñ–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
            text = f"[{page}]" if page == current_page else str(page)
            row.append(InlineKeyboardButton(text, callback_data=f"page_{page}"))
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥–∏ –ø–æ 5
            if len(row) == 5:
                keyboard.append(row)
                row = []
        if row:  # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥, —è–∫—â–æ –≤—ñ–Ω —î
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
        message_text = f"üìã <b>–°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page}</b>\n\n{numbered_data}"
        await update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except FileNotFoundError:
        # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –≤—Å–µ –æ–¥–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        keyboard = []
        row = []
        current_page = context.user_data.get('current_page', 1)
        for page in range(1, 11):
            text = f"[{page}]" if page == current_page else str(page)
            row.append(InlineKeyboardButton(text, callback_data=f"page_{page}"))
            if len(row) == 5:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = f"üìã <b>–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö</b>\n\n<i>–°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page}</i>"
        await update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {str(e)}")
        await update.message.reply_text(
            f"‚ùå <b>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:</b>\n<code>{str(e)}</code>",
            parse_mode='HTML'
        )

# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data.startswith("page_"):
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ callback_data
            page = int(data.split("_")[1])
            context.user_data['current_page'] = page
            
            try:
                user_file = get_user_file_path(user_id)
                with open(user_file, "r", encoding="utf-8") as file:
                    data = file.readlines()
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                items_per_page = 10
                start_index = (page - 1) * items_per_page
                end_index = min(start_index + items_per_page, len(data))
                
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                page_data = data[start_index:end_index] if data else []
                
                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ HTML —Ç–µ–≥–∞–º–∏
                if page_data:
                    numbered_data = '\n'.join([
                        f"<b>{start_index + i + 1}.</b> <code>{line.strip()}</code>" 
                        for i, line in enumerate(page_data)
                    ])
                else:
                    numbered_data = "<i>–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ</i>"
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
                keyboard = []
                row = []
                for p in range(1, 11):
                    text = f"[{p}]" if p == page else str(p)
                    row.append(InlineKeyboardButton(text, callback_data=f"page_{p}"))
                    # –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥–∏ –ø–æ 5
                    if len(row) == 5:
                        keyboard.append(row)
                        row = []
                if row:
                    keyboard.append(row)
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                message_text = f"üìã <b>–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}</b>\n\n{numbered_data}"
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
                await query.edit_message_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                
            except FileNotFoundError:
                keyboard = []
                row = []
                for p in range(1, 11):
                    text = f"[{p}]" if p == page else str(p)
                    row.append(InlineKeyboardButton(text, callback_data=f"page_{p}"))
                    if len(row) == 5:
                        keyboard.append(row)
                        row = []
                if row:
                    keyboard.append(row)
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                message_text = f"üìã <b>–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö</b>\n\n<i>–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}</i>"
                await query.edit_message_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ button_handler: {str(e)}")
        await query.message.reply_text(
            f"‚ùå <b>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏:</b>\n<code>{str(e)}</code>",
            parse_mode='HTML'
        )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
async def get_nearest_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_file = get_user_file_path(user_id)
    
    try:
        if not os.path.exists(user_file):
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞—Ç.", reply_markup=get_menu_keyboard())
            return

        with open(user_file, "r", encoding="utf-8") as file:
            dates = file.readlines()
        
        if not dates:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞—Ç.", reply_markup=get_menu_keyboard())
            return

        today = date.today()
        min_days = float('inf')
        nearest_birthdays = {}  # —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è {date: [names]}
        
        month_number = {
            '–°—ñ—á–µ–Ω—å': 1, '–õ—é—Ç–∏–π': 2, '–ë–µ—Ä–µ–∑–µ–Ω—å': 3, '–ö–≤—ñ—Ç–µ–Ω—å': 4,
            '–¢—Ä–∞–≤–µ–Ω—å': 5, '–ß–µ—Ä–≤–µ–Ω—å': 6, '–õ–∏–ø–µ–Ω—å': 7, '–°–µ—Ä–ø–µ–Ω—å': 8,
            '–í–µ—Ä–µ—Å–µ–Ω—å': 9, '–ñ–æ–≤—Ç–µ–Ω—å': 10, '–õ–∏—Å—Ç–æ–ø–∞–¥': 11, '–ì—Ä—É–¥–µ–Ω—å': 12
        }

        for line in dates:
            try:
                # –†–æ–∑–±–∏—Ä–∞—î–º–æ —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ "–Ü–º'—è: –¥–µ–Ω—å –º—ñ—Å—è—Ü—å —Ä—ñ–∫"
                name, birthday = line.strip().split(': ')
                day, month, year = birthday.strip().split()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –º—ñ—Å—è—Ü—å –≤ —á–∏—Å–ª–æ, —è–∫—â–æ –≤—ñ–Ω —Ç–µ–∫—Å—Ç–æ–≤–∏–π
                if month in month_number:
                    month = month_number[month]
                else:
                    month = int(month)
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–∞—Ç–∏
                birthday_date = date(today.year, int(month), int(day))
                
                # –Ø–∫—â–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–æ–π—à–æ–≤ —Ü—å–æ–≥–æ —Ä–æ–∫—É, –¥–æ–¥–∞—î–º–æ —Ä—ñ–∫
                if birthday_date < today:
                    birthday_date = date(today.year + 1, int(month), int(day))
                
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
                days_until = (birthday_date - today).days
                
                if days_until < min_days:
                    min_days = days_until
                    nearest_birthdays.clear()
                    nearest_birthdays[birthday_date] = [name]
                elif days_until == min_days:
                    if birthday_date not in nearest_birthdays:
                        nearest_birthdays[birthday_date] = []
                    nearest_birthdays[birthday_date].append(name)

            except (ValueError, IndexError) as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞—Ç–∏: {line.strip()} - {str(e)}")
                continue
        
        if nearest_birthdays:
            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –¥–∞—Ç—É (–≤–æ–Ω–∏ –≤—Å—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ, –±–æ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤)
            nearest_date = list(nearest_birthdays.keys())[0]
            names = nearest_birthdays[nearest_date]
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –º—ñ—Å—è—Ü—å –¥–ª—è –≤–∏–≤–æ–¥—É
            month_names = {v: k for k, v in month_number.items()}
            month_name = month_names.get(nearest_date.month, str(nearest_date.month))
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω
            if len(names) == 1:
                names_text = names[0]
            elif len(names) == 2:
                names_text = f"{names[0]} —Ç–∞ {names[1]}"
            else:
                names_text = ", ".join(names[:-1]) + f" —Ç–∞ {names[-1]}"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–Ω—ñ–≤
            if min_days == 0:
                message = (
                    f"üéâ <b>–°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É {names_text}!</b>\n"
                    f"üéÇ –í—ñ—Ç–∞—î–º–æ –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!"
                )
            elif min_days == 1:
                message = (
                    f"üéÇ <b>–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</b>\n"
                    f"üë• {names_text}\n"
                    f"üìÖ {nearest_date.day} {month_name}"
                )
            else:
                days_word = "–¥–µ–Ω—å" if min_days % 10 == 1 and min_days != 11 else "–¥–Ω—ñ" if 2 <= min_days % 10 <= 4 and (min_days < 10 or min_days > 20) else "–¥–Ω—ñ–≤"
                message = (
                    f"üéÇ <b>–ù–∞–π–±–ª–∏–∂—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</b>\n"
                    f"üë• {names_text}\n"
                    f"üìÖ {nearest_date.day} {month_name}\n"
                    f"‚è∞ —á–µ—Ä–µ–∑ {min_days} {days_word}"
                )
            
            await update.message.reply_text(message, parse_mode='HTML')
        else:
            await update.message.reply_text(
                "‚ùå <b>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.</b>",
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {str(e)}")
        await update.message.reply_text(
            "‚ùå <b>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.</b>",
            parse_mode='HTML'
        )

async def add_birthday_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
    await update.message.reply_text(
        "üë§ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è:",
        parse_mode='HTML'
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —Ç–∞ –∑–∞–ø–∏—Ç—É—î–º–æ –¥–µ–Ω—å"""
    name = update.message.text.strip()
    
    if not name:
        await update.message.reply_text("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return NAME
    
    context.user_data['name'] = name
    await update.message.reply_text(
        "üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–µ–Ω—å (1-31):",
        parse_mode='HTML'
    )
    return DAY

async def get_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î–º–æ –¥–µ–Ω—å —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –º—ñ—Å—è—Ü—è–º–∏"""
    try:
        day = int(update.message.text)
        if day < 1 or day > 31:
            await update.message.reply_text("‚ùå –î–µ–Ω—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 31. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return DAY
        
        context.user_data['day'] = day
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –º—ñ—Å—è—Ü—è–º–∏
        months = [
            ('–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å'),
            ('–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å'),
            ('–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å'),
            ('–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å')
        ]
        
        keyboard = []
        for row in months:
            keyboard_row = []
            for month in row:
                keyboard_row.append(InlineKeyboardButton(month, callback_data=month))
            keyboard.append(keyboard_row)
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìÖ –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return MONTH
        
    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 31:")
        return DAY

async def get_month(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î–º–æ –º—ñ—Å—è—Ü—å —Ç–∞ –∑–∞–ø–∏—Ç—É—î–º–æ —Ä—ñ–∫"""
    query = update.callback_query
    await query.answer()
    
    month = query.data
    context.user_data['month'] = month
    
    await query.message.reply_text(
        "üìÖ –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ (4 —Ü–∏—Ñ—Ä–∏):",
        parse_mode='HTML'
    )
    return YEAR

async def get_year(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_file = get_user_file_path(user_id)
    
    try:
        year = int(update.message.text)
        current_year = datetime.now().year
        
        if year < 1900 or year > current_year:
            await update.message.reply_text(
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –º—ñ–∂ 1900 —Ç–∞ {current_year}",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
            )
            return YEAR

        name = context.user_data['name']
        day = context.user_data['day']
        month = context.user_data['month']
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å –∫—Ä–∞–ø–æ–∫
        with open(user_file, "a", encoding="utf-8") as file:
            file.write(f"{name}: {day} {month} {year}\n")
        
        await update.message.reply_text(
            f"‚úÖ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ:\n"
            f"üë§ {name}\n"
            f"üìÖ {day} {month} {year}",
            parse_mode='HTML',
            reply_markup=get_menu_keyboard()
        )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data.clear()
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1990)",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
        )
        return YEAR

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î —Ä–æ–∑–º–æ–≤—É"""
    await update.message.reply_text(
        "‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        parse_mode='HTML'
    )
    context.user_data.clear()
    return ConversationHandler.END

async def delete_birthday_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
    message = update.message
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
    user_id = message.from_user.id
    user_file = get_user_file_path(user_id)
    
    with open(user_file, "r", encoding="utf-8") as file:
        dates = file.readlines()
    
    if not dates:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞—Ç.", reply_markup=get_menu_keyboard())
        return ConversationHandler.END
    
    text = "üóë <b>–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–∞—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:</b>\n\n"
    for i, date in enumerate(dates, 1):
        text += f"{i}. {date.strip()}\n"
    
    await message.reply_text(text, parse_mode='HTML')
    return AWAITING_DELETE_NUMBER

async def handle_delete_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–∞—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    message = update.message
    text = message.text
    
    try:
        user_id = message.from_user.id
        user_file = get_user_file_path(user_id)
        
        if not os.path.exists(user_file):
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
                reply_markup=get_menu_keyboard()
            )
            return ConversationHandler.END

        with open(user_file, "r", encoding="utf-8") as file:
            lines = file.readlines()
        
        try:
            number = int(update.message.text)
            if number < 1 or number > len(lines):
                await update.message.reply_text(
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ {len(lines)}",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
                )
                return AWAITING_DELETE_NUMBER

            # –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ä—è–¥–æ–∫
            deleted_line = lines.pop(number - 1)
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª –±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ —Ä—è–¥–∫–∞
            with open(user_file, "w", encoding="utf-8") as file:
                file.writelines(lines)
            
            await update.message.reply_text(
                f"‚úÖ <b>–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ:</b>\n"
                f"<code>{deleted_line.strip()}</code>",
                parse_mode='HTML'
            )
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫
            if lines:
                text = "üìÖ <b>–û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–∞—Ç:</b>\n\n"
                for i, date in enumerate(lines, 1):
                    text += f"{i}. {date.strip()}\n"
                await update.message.reply_text(text, parse_mode='HTML')
            else:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞—Ç.", reply_markup=get_menu_keyboard())
            
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π –Ω–æ–º–µ—Ä –¥–∞—Ç–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
            )
            return AWAITING_DELETE_NUMBER
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {str(e)}")
        await update.message.reply_text(
            f"‚ùå <b>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:</b>\n<code>{str(e)}</code>",
            parse_mode='HTML'
        )
        return ConversationHandler.END

async def cancel_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    await update.message.reply_text(
        "‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        parse_mode='HTML'
    )
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
    add_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('add', add_birthday_start),
            MessageHandler(filters.Regex('^–î–æ–¥–∞—Ç–∏ –¥–∞—Ç—É$'), add_birthday_start)
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç–∏$|^–ù–∞–π–±–ª–∏–∂—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$|^–í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞—Ç—É$'), get_name)],
            DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç–∏$|^–ù–∞–π–±–ª–∏–∂—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$|^–í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞—Ç—É$'), get_day)],
            MONTH: [CallbackQueryHandler(get_month)],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç–∏$|^–ù–∞–π–±–ª–∏–∂—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$|^–í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞—Ç—É$'), get_year)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex('^–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç–∏$|^–ù–∞–π–±–ª–∏–∂—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$|^–í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞—Ç—É$'), cancel)
        ],
    )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
    delete_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('delete', delete_birthday_start),
            MessageHandler(filters.Regex('^–í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞—Ç—É$'), delete_birthday_start)
        ],
        states={
            AWAITING_DELETE_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delete_number)],
        },
        fallbacks=[CommandHandler('cancel', cancel_delete)],
    )

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    application.add_handler(CommandHandler("start", start))
    application.add_handler(add_conv_handler)
    application.add_handler(delete_conv_handler)
    
    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—ñ –Ω–µ —î –∫–æ–º–∞–Ω–¥–∞–º–∏
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_message
    ))

    # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
